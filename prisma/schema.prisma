generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserActivityType {
  SIGNIN
  PASSWORD_CHANGE
}

model User {
  id             Int         @id @default(autoincrement())
  email          String      @unique
  password       String
  name           String?
  address        String?
  profilePicture String?
  isAdmin        Boolean     @default(false)
  isActive       Boolean     @default(true)
  birthDate      DateTime?
  phone          String?     @unique
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  logins         UserLogin[]
  carts          Cart[]
  orders         Order[]
  addresses      Address[]
}

model UserLogin {
  id          Int              @id @default(autoincrement())
  userId      Int
  loginTime   DateTime         @default(now())
  ipAddress   String?
  userAgent   String?
  activity    UserActivityType
  oldPassword String?
  waktu       DateTime         @default(now())
  user        User             @relation(fields: [userId], references: [id])
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  price       Int
  stock       Int
  image       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  carts       Cart[]
  orderItems  OrderItem[]
}

model Cart {
  id          Int      @id @default(autoincrement())
  userId      Int
  productId   Int
  quantity    Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
  product     Product  @relation(fields: [productId], references: [id])
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      Int
  totalAmount Int
  status      String      @default("pending")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user        User        @relation(fields: [userId], references: [id])
  items       OrderItem[] 
  payments    Payment[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Int

  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Address {
  id        Int    @id @default(autoincrement())
  userId    Int
  label     String
  address   String
  city      String
  province  String
  postal    String
  phone     String
  user      User   @relation(fields: [userId], references: [id])
}

model Payment {
  id              Int       @id @default(autoincrement())
  orderId         Int
  amount          Int
  method          String
  bank            String?
  status          String    @default("pending")
  transactionId   String?   @unique
  gatewayResponse String?
  verificationCode String?
  paidAt          DateTime?
  expiresAt       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  order           Order     @relation(fields: [orderId], references: [id])
} 